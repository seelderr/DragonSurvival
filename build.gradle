plugins {
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
	id 'net.neoforged.gradle.userdev' version '7.0.165'
	id 'com.diffplug.spotless' version "7.0.0.BETA1"
}

version = minecraft_version + "-v" + mod_version + "-" + new Date().format("dd.MM.yyyy")
group = mod_group

base {
	archivesName = "DragonSurvival"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
	// applies to all the run configs below
	configureEach {
		// Recommended logging data for a userdev environment
		// The markers can be added/remove as needed separated by commas.
		// "SCAN": For mods scan.
		// "REGISTRIES": For firing of registry events.
		// "REGISTRYDUMP": For getting the contents of all registries.
		systemProperty 'forge.logging.markers', 'REGISTRIES'

		// Recommended logging level for the console
		// You can set various levels here.
		// Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
		systemProperty 'forge.logging.console.level', 'debug'

		modSource project.sourceSets.main
	}

	client {
		// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
		programArguments '--username', 'Dev####', '--uuid', 'fdb0e318-1ac3-4049-b6f8-d024c0b87a56'
	}

	server {
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
		programArgument '--nogui'
	}

	// This run config launches GameTestServer and runs all registered gametests, then exits.
	// By default, the server will crash when no gametests are provided.
	// The gametest system is also enabled by default for other run configs under the /test command.
	gameTestServer {
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
	}

	data {
		// example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
		// workingDirectory project.file('run-data')

		// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
		programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
	}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven {
		name = 'GeckoLib'
		url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
		content {
			includeGroup("software.bernie.geckolib")
		}
	}
	maven { /* owolib */ url 'https://maven.wispforest.io' }
	maven { /* owolib */ url 'https://maven.su5ed.dev/releases' }
	maven { /* JEI */ url "https://maven.blamejared.com" }
	maven { /* Curios */ url "https://maven.theillusivec4.top/" }
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven { url "https://api.modrinth.com/maven" }
}

dependencies {
	implementation "net.neoforged:neoforge:${neo_version}"

	// Dependencies
	implementation "software.bernie.geckolib:geckolib-neoforge-${minecraft_version}:${geckolib_version}"
	implementation "io.wispforest:owo-lib-neoforge:${owolib_version}+1.21"

	// Compatibility
	compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
	runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")

	// Test
	// implementation "curse.maven:embeddium-908741:5556146" // 1.0.7
	// implementation "maven.modrinth:sodium:mc1.21-0.6.0-beta.1-neoforge"
}

tasks.withType(ProcessResources).configureEach {
	var replaceProperties = [
			minecraft_version           : minecraft_version,
			minecraft_version_range     : minecraft_version_range,
			neo_version                 : neo_version,
			neo_version_range           : neo_version_range,
			loader_version_range        : loader_version_range,
			geckolib_version_range      : geckolib_version_range,
			owolib_version_range        : owolib_version_range,
			mod_id                      : mod_id,
			mod_name                    : mod_name,
			mod_license                 : mod_license,
			mod_version                 : mod_version,
			mod_authors                 : mod_authors,
			pack_format_number          : pack_format_number,
	]

	duplicatesStrategy = DuplicatesStrategy.WARN

	inputs.properties replaceProperties

	filesMatching(['META-INF/neoforge.mods.toml']) {
		expand replaceProperties + [project: project]
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}

minecraft {
	accessTransformers {
		file('src/main/resources/META-INF/accesstransformer.cfg')
	}
}

// We use spotless for code formatting.
spotless {
	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '.gitattributes', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}

	java {
		target 'src/*/java/**/*.java'

		// Use the default importOrder configuration
		importOrder()
		removeUnusedImports()

		// fixes formatting of type annotations
		formatAnnotations()
	}
}
